{"version":3,"sources":["App.js","index.js"],"names":["Text","Typography","socket","socketIOClient","App","useState","memory","network","cpu","storage","newData","setNewData","lastReceiveTime","setLastReceiveTime","networkData","setNetworkData","memoryData","setMemoryData","cpuData","setCpuData","storageData","setStorageData","useEffect","on","data","time","getNetwork","getMemory","getCpu","getStorage","length","splice","push","Moment","format","send","tx","receive","rx","total","active","available","load","currentload","map","item","mount","use","use_percent","className","justify","align","lg","span","xs","style","color","width","height","margin","top","right","left","bottom","dataKey","domain","type","stroke","dot","isAnimationActive","barSize","fill","background","loadAvrage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.103e044a.chunk.js","sourcesContent":["import React, { memo, useState } from 'react';\nimport { useEffect } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './App.scss';\nimport { Typography , Row , Col} from 'antd';\nimport {  LineChart, Line, XAxis, YAxis, BarChart, Bar, Legend,ResponsiveContainer} from 'recharts'\nimport Moment from 'jalali-moment';\n\n\nconst {Text} = Typography\n\n//const ENDPOINT = \"https://monitoring.jimbomarket.ir\";\n\nconst socket = socketIOClient();\n\n\nfunction App() {\n\n  const max = 60\n  \n  const [newData , setNewData] = useState({\n    memory : {},\n    network : {},\n    cpu : {},\n    storage : []\n  })\n\n  const [lastReceiveTime , setLastReceiveTime] = useState('')\n\n  const [networkData , setNetworkData] = useState([])\n  const [memoryData , setMemoryData] = useState([])\n  const [cpuData , setCpuData] = useState([])\n  const [storageData , setStorageData] = useState([])\n  \n\n\n  useEffect(()=>{\n\n    socket.on(\"system-info\", data => {\n      setLastReceiveTime(data.time);\n      //console.log(data);\n\n      setNewData(data)\n      \n\n    });\n\n  },[])\n\n\n  useEffect(()=>{\n    getNetwork(newData)\n    getMemory(newData)\n    getCpu(newData)\n    getStorage(newData)\n  },[newData])\n\n  const getNetwork = ({network})=>{\n\n    if(!network) return;\n    let data = [...networkData];\n\n    if(data.length > max) data.splice(0 , 1)\n\n    data.push({\n      time : Moment().format('HH:mm:ss'),\n      send : network.tx ,\n      receive : network.rx \n    })\n\n    setNetworkData(data)\n  }\n\n  const getMemory = ({memory})=>{\n\n    if(!memory) return;\n    let data = [...memoryData];\n\n    if(data.length > max) data.splice(0 , 1)\n\n    data.push({\n      time : Moment().format('HH:mm:ss'),\n      total : memory.total,\n      active : memory.active ,\n      available : memory.available\n    })\n\n    setMemoryData(data)\n  }\n\n  const getCpu = ({cpu})=>{\n\n    if(!cpu) return;\n    let data = [...cpuData];\n\n    if(data.length > max) data.splice(0 , 1)\n\n    data.push({\n      time : Moment().format('HH:mm:ss'),\n      load : cpu.currentload\n    })\n\n    setCpuData(data)\n  }\n\n  const getStorage = ({storage})=>{\n\n    if(!storage) return;\n    let data = storage.map(item=>{\n     \n      return(\n        {\n          mount : item.mount,\n          use : item.use_percent\n        }\n      )\n    })\n\n    setStorageData(data)\n  }\n\n\n\n\n  \n\n  \n\n\n  \n  return (\n    <div className=\"app\">\n        <Row justify={'center'}>\n          <Col>\n              <Text className={'last-receive-time'}> Last Receive Data : {lastReceiveTime}</Text>\n          </Col>\n        </Row>\n\n        <Row align={'middle'} justify={'space-around'}>\n\n          <Col lg={{span : 11}} xs={{span : 24}}>\n\n            <div className={'chart-box'}>\n\n              <Text style={{color : '#fff'}}>NETWORK (MB Per Second)</Text>\n              <br />\n              <Text style={{color : '#fff'}}>receive : {newData.network.rx} MB/s</Text>\n              <br />\n              <Text style={{color : '#fff'}}>send : {newData.network.tx} MB/s</Text>\n              <br />\n\n\n              <ResponsiveContainer width={'100%'}  height={250}>\n\n                <LineChart\n                  data={networkData}\n                  margin={{\n                    top: 25, right: 5, left: 5, bottom: 10,\n                  }}\n                >\n                  <XAxis dataKey=\"time\" />\n                  <YAxis domain={[0 , 1]} />\n                  \n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"receive\" stroke=\"#f00\"  dot={false} isAnimationActive={false} />\n                  <Line type=\"monotone\" dataKey=\"send\" stroke=\"#0f0\"  dot={false} isAnimationActive={false} />\n                </LineChart>\n\n              </ResponsiveContainer>\n              \n            </div>\n\n          </Col>\n\n          <Col lg={{span : 11}} xs={{span : 24}}>\n\n            <div className={'chart-box'}>\n\n              <Text style={{color : '#fff'}}>MEMORY (GB)</Text>\n              <br />\n              <Text style={{color : '#fff'}}>total : {newData.memory.total} GB</Text>\n              <br />\n              <Text style={{color : '#fff'}}>active : {newData.memory.active} GB</Text>\n              <br />\n\n              <ResponsiveContainer width={'100%'}  height={250}>\n                <LineChart\n                  \n                  data={memoryData}\n                  margin={{\n                    top: 25, right: 5, left: 5, bottom: 10,\n                  }}\n                >\n                  <XAxis dataKey=\"time\" />\n                  <YAxis domain={[0 , newData.memory.total]} />\n                  \n                  <Legend />\n                  <Line type=\"natural\" dataKey=\"active\" stroke=\"#f00\"  dot={false} isAnimationActive={false}  />\n                  <Line type=\"monotone\" dataKey=\"total\" stroke=\"#0f0\"  dot={false}  isAnimationActive={false}/>\n                </LineChart>\n              </ResponsiveContainer>\n              \n            </div>\n\n          </Col>\n\n          \n        </Row>\n\n        <br />\n        <br />\n\n\n\n        <Row align={'middle'} justify={'space-around'} >\n\n          <Col lg={{span : 11}} xs={{span : 24}}>\n\n            <div className={'chart-box'}>\n\n              <Text style={{color : '#fff'}}>STORAGE (%)</Text>\n              <br />\n              {newData.storage.map(item=>{\n                return(\n                  <>\n                    <Text style={{color : '#fff'}}>{item.mount} : {item.use_percent} %</Text>\n                    <br />\n                  </>\n                )\n              })}\n              \n           \n\n              <ResponsiveContainer width={'100%'}  height={250}>\n                <BarChart\n                  width={700}\n                  height={250}\n                  data={storageData}\n                  margin={{\n                    top: 25, right: 5, left: 5, bottom: 10,\n                  }}\n                  barSize={20}\n                >\n                  <XAxis dataKey=\"mount\"  />\n                  <YAxis domain={[0 , 100]}/> \n                  \n                  <Legend />\n                  \n                  <Bar \n                    \n                    dataKey=\"use\" \n                    fill={'#f00'} \n                    \n                    background={{ fill: '#eee' }} barSize={100} isAnimationActive={false}  />\n                </BarChart>\n              </ResponsiveContainer>\n              \n                \n\n            </div>\n\n          </Col>\n\n          <Col lg={{span : 11}} xs={{span : 24}}>\n\n            <div className={'chart-box'}>\n\n              <Text style={{color : '#fff'}}>CPU</Text>\n              <br />\n              <Text style={{color : '#fff'}}>current load : {newData.cpu.currentload} %</Text>\n              <br />\n              <Text style={{color : '#fff'}}>load avrage : {newData.cpu.loadAvrage} </Text>\n              <br />\n              \n\n              <ResponsiveContainer width={'100%'}  height={250}>\n\n                <LineChart\n                  width={700}\n                  height={250}\n                  data={cpuData}\n                  margin={{\n                    top: 25, right: 5, left: 5, bottom: 10,\n                  }}\n                >\n                  <XAxis dataKey=\"time\" />\n                  <YAxis domain={[0 , 100]} />\n                  \n                  <Legend />\n                  <Line type=\"natural\" dataKey=\"load\" stroke=\"#f00\"  dot={false} isAnimationActive={false} />\n                  \n                </LineChart>\n\n              </ResponsiveContainer>\n              \n            </div>\n\n          </Col>\n\n\n        </Row>\n\n        \n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}